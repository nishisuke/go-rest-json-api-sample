/* tslint:disable */
/* eslint-disable */
/**
 * Swagger baaa API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface RoutesError
 */
export interface RoutesError {
    /**
     * 
     * @type {string}
     * @memberof RoutesError
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface RoutesUser
 */
export interface RoutesUser {
    /**
     * 
     * @type {string}
     * @memberof RoutesUser
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof RoutesUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoutesUser
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RoutesUser
     */
    'updatedAt'?: string;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get accounts
         * @summary List accounts
         * @param {string} [q] name search by q
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet: async (q?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * get accounts
         * @summary List accounts
         * @param {string} [q] name search by q
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsGet(q?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoutesUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsGet(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * get accounts
         * @summary List accounts
         * @param {string} [q] name search by q
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(q?: string, options?: any): AxiosPromise<Array<RoutesUser>> {
            return localVarFp.accountsGet(q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * get accounts
     * @summary List accounts
     * @param {string} [q] name search by q
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsGet(q?: string, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsGet(q, options).then((request) => request(this.axios, this.basePath));
    }
}


